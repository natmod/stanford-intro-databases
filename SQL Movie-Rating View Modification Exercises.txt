SQL Movie-Rating View Modification Exercises

Q1
1.0/1.0 point (graded)
Write an instead-of trigger that enables updates to the title attribute of view LateRating.

create trigger T instead of update of title on LateRating
for each row
when new.mID=old.mID
begin
update Movie set title=new.title where mID=old.mID;
end;

Q2
1.0/1.0 point (graded)
Write an instead-of trigger that enables updates to the stars attribute of view LateRating. 

Policy: Updates to attribute stars in LateRating should update Rating.stars for the corresponding movie rating. (You may assume attributes [mID,ratingDate] together are a key for table Rating.) Make sure the mID and ratingDate attributes of view LateRating have not also been updated -- if either one has been updated, don't make any changes. Don't worry about updates to title.

create trigger T
instead of update of stars on LateRating
for each row
when new.mID=old.mID and new.ratingDate=old.ratingDate
begin
update Rating set stars=new.stars where mID=old.mID and ratingDate=old.ratingDate;
end;

Q3
1.0/1.0 point (graded)
Write an instead-of trigger that enables updates to the mID attribute of view LateRating. 

Policy: Updates to attribute mID in LateRating should update Movie.mID and Rating.mID for the corresponding movie. Update all Rating tuples with the old mID, not just the ones contributing to the view. Don't worry about updates to title, stars, or ratingDate.

create trigger T
instead of update of mID on LateRating
for each row
begin
update Movie set mID=new.mID where mID=old.mID;
update Rating set mID=new.mID where mID=old.mID;
end;

Q4
1.0/1.0 point (graded)
Finally, write a single instead-of trigger that combines all three of the previous triggers to enable simultaneous updates to attributes mID, title, and/or stars in view LateRating. Combine the view-update policies of the three previous problems, with the exception that mID may now be updated. Make sure the ratingDate attribute of view LateRating has not also been updated -- if it has been updated, don't make any changes.

create trigger Combined
instead of update of mID, title, stars on LateRating
for each row
when new.ratingDate=old.ratingDate
begin
update Movie set title=new.title, mID=new.mID
where mID=old.mID;
update Rating set stars=new.stars
where mID=old.mID and ratingDate=old.ratingDate;
update Rating set mID=new.mID
where mID=old.mID;
end;

Q5
1.0/1.0 point (graded)
Write an instead-of trigger that enables deletions from view HighlyRated. 

Policy: Deletions from view HighlyRated should delete all ratings for the corresponding movie that have stars > 3.

create trigger Del
instead of delete on HighlyRated
for each row
begin
delete from Rating
where mID=old.mID and stars>3;
end;

Q6
1.0/1.0 point (graded)
Write an instead-of trigger that enables deletions from view HighlyRated. 

Policy: Deletions from view HighlyRated should update all ratings for the corresponding movie that have stars > 3 so they have stars = 3.

create trigger DEL
instead of delete on HighlyRated
for each row
begin
update Rating set stars=3
where mID=old.mID and stars>3;
end;

Q7
1.0/1.0 point (graded)
Write an instead-of trigger that enables insertions into view HighlyRated. 

Policy: An insertion should be accepted only when the (mID,title) pair already exists in the Movie table. (Otherwise, do nothing.) Insertions into view HighlyRated should add a new rating for the inserted movie with rID = 201, stars = 5, and NULL ratingDate.

create trigger Ins
instead of insert on HighlyRated
for each row
when new.mID in (select mID from Movie where mID=new.mID and title=new.title)
begin
insert into Rating
values (201, new.mID, 5, null);
end;

Q8
1.0/1.0 point (graded)
Write an instead-of trigger that enables insertions into view NoRating. 

Policy: An insertion should be accepted only when the (mID,title) pair already exists in the Movie table. (Otherwise, do nothing.) Insertions into view NoRating should delete all ratings for the corresponding movie.

create trigger inz
instead of insert on NoRating
for each row
when new.mID in (select mID from Movie where mID=new.mID and title=new.title)
begin
delete from Rating
where mID=new.mID;
end;

Q9
1.0/1.0 point (graded)
Write an instead-of trigger that enables deletions from view NoRating. 

Policy: Deletions from view NoRating should delete the corresponding movie from the Movie table.

create trigger Del
instead of delete on NoRating
for each row
begin
delete from Movie where mID = old.mID;
end;

Q10
1.0/1.0 point (graded)
Write an instead-of trigger that enables deletions from view NoRating. 

Policy: Deletions from view NoRating should add a new rating for the deleted movie with rID = 201, stars = 1, and NULL ratingDate.

create trigger Del
instead of delete on NoRating
for each row
begin
insert into Rating
values (201, old.mID, 1, null);
end;